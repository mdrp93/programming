import java.util.Scanner;

public class doubloon {
    
    public static boolean onlyLetters(String palabra) { //The purpose of this method is to check if a given string contains only letters.
        for (int i = 0; i < palabra.length(); i++) {
            if (!Character.isLetter(palabra.charAt(i))) { //with hte "Character.isLetter" method we can check if the current character is a letter.
                return false;
            }
        }
        return true;
    }

    public static boolean isDoubloon(String word) {
        
        word = word.toLowerCase();
        int len = word.length(); 
        int count = 0;
        boolean retVal = false;

        for (int i = 0; i < len; i++) { 
            char letra = word.charAt(i); 
            for (int j = i + 1; j < len; j++) { 
                if (letra == word.charAt(j)) { 
                    count++; } } }
        
       if(count == len / 2) {retVal=true; }
       
       return retVal;}
    
    public static void countDifferentLetters(String palabra) {
        int dif = 0;
        int equals = 0;
        
            for (int i = 0; i < palabra.length(); i++) {
                char letra = palabra.charAt(i);
                boolean same = false;
        
                for (int j = i + 1; j < palabra.length(); j++) {
                    if (letra == palabra.charAt(j)) {
                        same = true;
                        break;
                    }
                }
            if (same) {equals++;} 
            else {dif++;}
            }
        
        System.out.println("The word \"" + palabra + "\" contains " + dif + " different letters and " + equals+" repeated letters.");
        }
    
       
     public static void main(String[] args) {
    
        Scanner in = new Scanner(System.in);
        
        System.out.println();
        System.out.print("Insert a word: ");
        
        String word = in.nextLine();
        System.out.println();
            while (!onlyLetters(word)) {    //while onlyLetter is false
                System.err.println("IMPUT ERROR: " +word+ " is not a word or is unexpected character.");
                System.out.print("Insert a word: ");
                word = in.nextLine(); //the loop will continue running until the user enters a word that only contains letters.
            }
            if (isDoubloon(word)==true){
                System.out.println ("The word \"" + word + "\" IS a doubloon.");  
            }
            else {
                System.out.println ("The word \"" + word + "\" is NOT a doubloon."); 
            } 
        System.out.println();
        countDifferentLetters(word);
        System.out.println();
    }
}

--------------------------------------------------------------------------------------------------------
countDifferentLetters

Este código cuenta el número de letras diferentes y el número de letras que se repiten en una palabra.

1. Se declara el método "countDifferentLetters" que recibe como parámetro una palabra de tipo String.
2. Se declaran dos variables enteras "dif" e "equals" inicializadas en 0. 
3. Se inicia un bucle "for" para recorrer cada una de las letras de la palabra.
    a. Se declara una variable "letra" de tipo char que guarda la letra en la posición "i" de la palabra.
    b. Se declara una variable booleana "same" inicializada en falso.
    c. Se inicia otro bucle "for" para comparar la letra actual con las letras siguientes en la palabra.
        i. Si la letra es igual a alguna de las siguientes letras, se cambia el valor de "same" a verdadero y se rompe el bucle.
    d. Si "same" es verdadero, se incrementa el contador "equals".
    e. Si "same" es falso, se incrementa el contador "dif".
4. Se muestra por pantalla el resultado con el mensaje "The word " + palabra + " contains " + dif + " different letters and " + equals + " repeated letters".

----------------------------------------------------------------------------------------------------------
isDoubloon

1. La función "isDoubloon" toma una palabra como entrada y devuelve un valor booleano que indica si la palabra es un doubloon o no.
2. La primera línea de la función convierte la palabra en minúsculas utilizando el método "toLowerCase()". Esto se hace para que la función sea insensible a mayúsculas y minúsculas.
3. La variable "len" se inicializa con la longitud de la palabra.
4. La variable "count" se inicializa con cero. Esta variable se utiliza para contar cuántas veces se repite una letra en la palabra.
5. La variable "retVal" se inicializa con false. Esta variable se utilizará para almacenar el resultado final de si la palabra es un doubloon o no.
6. Se inicia un bucle "for" que recorre cada letra de la palabra.
7. En cada iteración del bucle "for", se obtiene la letra actual de la palabra utilizando el método "charAt(i)" donde "i" es el índice de la letra actual.
8. Dentro del bucle "for", se inicia otro bucle "for" que recorre las letras restantes después de la letra actual.
9. En cada iteración del segundo bucle "for", se compara la letra actual con la letra en el índice "j".
10. Si las dos letras son iguales, se incrementa la variable "count" en uno.
11. Después de completar ambos bucles "for", se verifica si "count" es igual a la mitad de la longitud de la palabra.
12. Si es así, se asigna true a la variable "retVal" indicando que la palabra es un doubloon.
13. Finalmente, se devuelve el valor de la variable "retVal".

--------------------------------------------------------------------------------------------------------------
for (int i = 0; i < palabra.length(); i++) 

El código "for" es una estructura que se utiliza para repetir un bloque de código varias veces. En este caso, se está utilizando para iterar sobre una palabra o cadena de texto.

La línea "int i = 0" inicializa una variable llamada "i" con un valor de 0. Esta variable se utilizará como contador para llevar un seguimiento de la posición actual en la cadena de texto.

La condición "i < palabra.length()" verifica si el valor de "i" es menor que la longitud de la cadena de texto "palabra". Si es cierto, el bloque de código dentro del bucle "for" se ejecutará.

La línea "i++" incrementa el valor de "i" en 1 en cada iteración, avanzando a la siguiente posición en la cadena de texto.

En resumen, el código "for" está recorriendo cada posición de la cadena de texto "palabra" una por una, desde la posición 0 hasta la posición (longitud - 1).